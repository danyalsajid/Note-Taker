import { createSignal, createEffect } from 'solid-js';
import Modal from './Modal';
import { getNotesByEpisode } from '../../data/seedData';

export default function AISummaryModal(props) {
  const [summary, setSummary] = createSignal('');
  const [isLoading, setIsLoading] = createSignal(false);
  const [notes, setNotes] = createSignal([]);

  // Generate AI summary when modal opens
  createEffect(() => {
    if (props.isOpen && props.episode) {
      generateSummary();
    }
  });

  const generateSummary = async () => {
    setIsLoading(true);
    setSummary('');
    
    const episodeNotes = getNotesByEpisode(props.episode.id);
    setNotes(episodeNotes);

    // Simulate AI processing
    setTimeout(() => {
      if (episodeNotes.length === 0) {
        setSummary('No notes available for this episode to generate a summary.');
      } else {
        // Generate a mock AI summary based on the notes
        const mockSummary = generateMockSummary(episodeNotes);
        setSummary(mockSummary);
      }
      setIsLoading(false);
    }, 2000);
  };

  const generateMockSummary = (notesList) => {
    if (notesList.length === 0) return '';
    
    // This is a mock AI summary generator
    const summaryParts = [
      `## Episode Summary\n\n**Total Notes:** ${notesList.length}\n\n`,
      `**Key Points:**\n`
    ];

    notesList.forEach((note, index) => {
      const shortContent = note.content.length > 100 
        ? note.content.substring(0, 100) + '...' 
        : note.content;
      summaryParts.push(`${index + 1}. ${shortContent}\n`);
    });

    summaryParts.push(`\n**Tags Mentioned:** ${[...new Set(notesList.flatMap(n => n.tags || []))].join(', ')}\n\n`);
    
    summaryParts.push(`**Recommendations:**\n`);
    summaryParts.push(`- Continue monitoring patient progress\n`);
    summaryParts.push(`- Schedule follow-up appointment if needed\n`);
    summaryParts.push(`- Review medication effectiveness\n\n`);
    
    summaryParts.push(`*This summary was generated by AI based on the available notes.*`);

    return summaryParts.join('');
  };

  const handleClose = () => {
    setSummary('');
    setNotes([]);
    props.onClose?.();
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(summary());
    // You could add a toast notification here
  };

  const handleExport = () => {
    const blob = new Blob([summary()], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${props.episode?.name || 'episode'}-summary.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Modal
      isOpen={props.isOpen}
      onClose={handleClose}
      title={`AI Summary - ${props.episode?.name || 'Episode'}`}
      size="large"
    >
      <div class="ai-summary-content">
        {isLoading() ? (
          <div class="text-center py-5">
            <div class="mb-4">
              <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
            </div>
            <h4 class="mb-3">Generating AI Summary...</h4>
            <p class="text-muted mb-4">Analyzing {notes().length} note{notes().length !== 1 ? 's' : ''} to create a comprehensive summary.</p>
            <div class="row g-3">
              <div class="col-12">
                <div class="d-flex align-items-center justify-content-start">
                  <i class="fa fa-check-circle text-success me-3"></i>
                  <span>Reading notes content</span>
                </div>
              </div>
              <div class="col-12">
                <div class="d-flex align-items-center justify-content-start">
                  <div class="spinner-border spinner-border-sm text-primary me-3"></div>
                  <span>Analyzing key information</span>
                </div>
              </div>
              <div class="col-12">
                <div class="d-flex align-items-center justify-content-start">
                  <i class="fa fa-circle text-muted me-3"></i>
                  <span class="text-muted">Generating summary</span>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div>
            <div class="d-flex justify-content-between align-items-center mb-3">
              <div class="d-flex align-items-center gap-2">
                <span class="badge bg-primary">AI Generated</span>
                <small class="text-muted">
                  Generated on {new Date().toLocaleDateString()}
                </small>
              </div>
              <div class="d-flex gap-2">
                <button
                  class="btn btn-outline-secondary btn-sm"
                  onClick={handleCopy}
                  title="Copy to clipboard"
                >
                  <i class="fa fa-copy me-1"></i>
                  Copy
                </button>
                <button
                  class="btn btn-outline-secondary btn-sm"
                  onClick={handleExport}
                  title="Export as text file"
                >
                  <i class="fa fa-download me-1"></i>
                  Export
                </button>
              </div>
            </div>
            
            <div class="bg-light p-3 rounded">
              <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit;">{summary()}</pre>
            </div>
          </div>
        )}

        <div class="d-flex justify-content-end mt-4">
          <button
            type="button"
            class="btn btn-primary"
            onClick={handleClose}
          >
            Close
          </button>
        </div>
      </div>
    </Modal>
  );
}
