import { createSignal, Show, onMount } from "solid-js";

export default function AISummaryModal({ isOpen, onClose, selectedItem, notes }) {
  const [summary, setSummary] = createSignal("");
  const [loading, setLoading] = createSignal(false);
  const [error, setError] = createSignal("");

  const generateSummary = async () => {
    if (!notes() || notes().length === 0) {
      setSummary("No notes available to summarize.");
      return;
    }

    setLoading(true);
    setError("");

    try {
      // Simulate AI API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock AI summary based on notes
      const noteCount = notes().length;
      const recentNote = notes()[0];
      const tags = [...new Set(notes().flatMap(note => note.tags || []))];
      
      const mockSummary = `
**Summary for ${selectedItem().name}**

**Overview:** This ${selectedItem().type} has ${noteCount} note(s) on record.

**Key Points:**
• Most recent activity: ${recentNote ? new Date(recentNote.createdAt).toLocaleDateString() : 'N/A'}
• Common themes: ${tags.length > 0 ? tags.join(', ') : 'No tags available'}
• Total notes analyzed: ${noteCount}

**Recent Activity:**
${notes().slice(0, 3).map(note => 
  `• ${note.text.substring(0, 100)}${note.text.length > 100 ? '...' : ''}`
).join('\n')}

**Recommendations:**
• Continue monitoring progress
• Schedule follow-up as needed
• Review medication compliance if applicable

*This summary was generated by AI and should be reviewed by healthcare professionals.*
      `.trim();

      setSummary(mockSummary);
    } catch (err) {
      setError("Failed to generate AI summary. Please try again.");
      console.error("AI Summary error:", err);
    } finally {
      setLoading(false);
    }
  };

  onMount(() => {
    if (isOpen()) {
      generateSummary();
    }
  });

  const handleClose = () => {
    setSummary("");
    setError("");
    onClose();
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(summary());
      alert("Summary copied to clipboard!");
    } catch (err) {
      console.error("Failed to copy:", err);
    }
  };

  return (
    <Show when={isOpen()}>
      <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header bg-info text-white">
              <h5 class="modal-title">
                <i class="bi bi-robot me-2"></i>
                AI Summary
                {selectedItem() && (
                  <small class="d-block opacity-75">
                    for {selectedItem().name}
                  </small>
                )}
              </h5>
              <button
                type="button"
                class="btn-close btn-close-white"
                onClick={handleClose}
              ></button>
            </div>
            
            <div class="modal-body">
              <Show when={loading()}>
                <div class="text-center py-5">
                  <div class="spinner-border text-info mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="text-muted">Generating AI summary...</p>
                  <small class="text-muted">
                    Analyzing {notes()?.length || 0} notes
                  </small>
                </div>
              </Show>

              <Show when={error()}>
                <div class="alert alert-danger">
                  <i class="bi bi-exclamation-triangle me-2"></i>
                  {error()}
                </div>
              </Show>

              <Show when={summary() && !loading()}>
                <div class="summary-content">
                  <div class="d-flex justify-content-between align-items-center mb-3">
                    <h6 class="mb-0">Generated Summary</h6>
                    <button
                      class="btn btn-outline-secondary btn-sm"
                      onClick={copyToClipboard}
                      title="Copy to clipboard"
                    >
                      <i class="bi bi-clipboard me-1"></i>
                      Copy
                    </button>
                  </div>
                  
                  <div class="card">
                    <div class="card-body">
                      <pre class="summary-text mb-0" style="white-space: pre-wrap; font-family: inherit;">
                        {summary()}
                      </pre>
                    </div>
                  </div>

                  <div class="alert alert-warning mt-3">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <small>
                      <strong>Disclaimer:</strong> This AI-generated summary is for informational purposes only 
                      and should not replace professional medical judgment.
                    </small>
                  </div>
                </div>
              </Show>
            </div>
            
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                onClick={handleClose}
              >
                Close
              </button>
              <Show when={summary() && !loading()}>
                <button
                  type="button"
                  class="btn btn-info"
                  onClick={generateSummary}
                >
                  <i class="bi bi-arrow-clockwise me-1"></i>
                  Regenerate
                </button>
              </Show>
            </div>
          </div>
        </div>
      </div>
    </Show>
  );
}
